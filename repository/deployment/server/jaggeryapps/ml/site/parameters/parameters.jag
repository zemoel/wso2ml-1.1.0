<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WSO2 Machine Learner</title>
    <link rel="icon" href="../../images/favicon.png" type="image/x-icon" />
    <link href="../../css/bootstrap.css" rel="stylesheet">
    <link href="../../css/custom.css" rel="stylesheet">
    <link href="../../css/custom-theme.css" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="../../css/d3.parsets.css">
    <link rel="stylesheet" type="text/css" href="../../css/data.css">
    <link rel="stylesheet" type="text/css" href="../../css/wso2.ml.graphs.css">
    <link rel="stylesheet" type="text/css" href="../../css/nv.d3.min.css">

    <script src="../../js/respond.min.js"></script>
	<script src="../../js/d3.v3.min.js"></script>
    <script src="../../js/d3.js"></script>
    <script src="../../js/nv.d3.js"></script>
    <script src="../../js/wso2.ml.graphs.js"></script>

    <script src="../../js/jquery-1.11.1.min.js"></script>
    <%
include("../../includes/tenantAware.jag");
%>

</head>

<body>

<div class="container col-lg-12 col-md-12 col-sm-12">

<!-- header -->
<header>
<div class="row wr-global-header">
	<div class="col-sm-8 app-logo"><img src="../../images/logo.png" /><h2 class="app-title">Machine Learner</h2>
	</div>
	<div class="col-sm-4">
		<div class="wr-auth pull-right">
			<a href="#" data-toggle="dropdown" class="cu-ico-right-button cu-ico-button-user"><% print(session.get("logged.user")); %></a>
			<div class="dropdown-menu">
				<div class="cu-arrow"></div>
				<div class="dropdown-menu-content">
					<a href="../logout/logout.jag" class="filter-item">Logout</a>
				</div>
			</div>
		</div>
	</div>
</div>
</header>
<!-- /header -->

<!-- secondary header - app bar -->
<div class="navbar-wrapper">
    <div id="nav" class="row wr-app-bar">
        <div class="col-md-9 wr-action-container">
            <div class="wr-project">
                <span class="title">PROJECTS \ </span><span id="nav-project"></span><span id="nav-analysis"></span>
            </div>

            <div class="wr-action-btn-bar">
                <a href="#" class="cu-btn btn-cancel" id="cancel-analysis">Cancel</a>
            </div>
        </div>

        <div class="col-md-3 wr-wiz-nav">
            <div class="wr-secondary-links pull-right">
                <div class="ctrl-wiz-nav">
                    <a href="#" id="prev-btn" class="cu-btn btn-prev">Previous</a>
                    <a href="#" id="btn-next" class="cu-btn-reverse btn-next">Next</a>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- secondary header - app bar -->

<!-- content/body -->
<!-- Wizard -->
<div class="nav-wizard-wrapper">
    <ul class="nav-wizard center-block">
        <li class="tab-link-disabled"><a href="#" ><span class="nav-wedge-step">Step 1</span>Preprocess</a></li>
        <li class="tab-link-disabled"><a href="#"><span class="nav-wedge-step">Step 2</span>Explore</a></li>
        <li class="tab-link-disabled"><a href="#"><span class="nav-wedge-step">Step 3</span>Algorithms</a></li>
        <li class="active tab-link-disabled"><a href="#"><span class="nav-wedge-step">Step 4</span>Parameters</a></li>
        <li class="tab-link-disabled"><a href="#"><span class="nav-wedge-step">Step 5</span>Model</a></li>
    </ul>
</div>

<div class="row">
	<div class="col-md-12">


		<!-- content -->
		<div class="container col-md-12 col-centered wr-content">

			<div id="notification-area"></div>
            <div class="wr-form col-lg-5 col-centered">

				<h1 class="title">Parameters</h1>

	            <label class="input-label">Set Hyper-Parameters for <span id="algo-cat"></span>\ <strong id="display-name"></strong> <span class="glyphicon"></span></label>
	            <div class="spcr-2"></div>

	            <div id="parameter-inputs">
					<!-- <label class="input-label">Iterations<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
					<div class="input-control text">
					    <input type="text" value="" placeholder="input text"/>
					</div>

					<label class="input-label">Responsive variable<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
					<div class="input-control text">
					    <input type="text" value="" placeholder="input text"/> -->
					</div>
				</div>

			</div>

		</div>

		<div class="container col-md-12 col-centered wr-content dl-network">
            <div class="wr-form col-lg-5 col-centered">
                <div id="dl-network"></div>
            </div>
        </div>
		<!-- /content -->


	</div>
</div>
<!-- /content/body -->

</div>

<!--footer class="footer">
        <p>&copy; 2014 WSO2 Inc. All Rights Reserved</p>
</footer-->

<script src="../../js/d3.v3.min.js" charset="utf-8"></script>
<script src="../../js/jquery-1.11.1.min.js"></script>
<script src="../../js/bootstrap.min.js"></script>
<script src="../../js/wso2.ml.util.js"></script>
<script src="../../js/jquery.dataTables.js"></script>

<script src="../../js/d3.parsets.js"></script>
<script src="../../js/figue.js"></script>

<script type="text/javascript">

var serverUrl = window.location.origin;

var doubleRegEx = /^[+-]?\d+(\.\d+)?$/g;
var integerRegEx = /^\d+$/g;

$( document ).ready(function() {

    $('#nav').affix({
          offset: {
            top: $('header').height()
          }
    });

    /*scrollVibrateFix();

    $(window).resize(function() {
        scrollVibrateFix();
    });*/

    // for tooltip
    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    })

    var projectName = getParameterByName('projectName');
    var analysisName = getParameterByName('analysisName');
    var analysisId = getParameterByName('analysisId');
    var datasetId = getParameterByName('datasetId');
    var algorithmName = getParameterByName('algorithmName');
    var algorithmType = getParameterByName('algorithmType');
    var fromAnalysis = getParameterByName('fromAnalysis');
    var fromNext;

    var hyperParametersArray = [];
    // get previously set hyper-parameters
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/analyses/" + analysisId + "/hyperParameters?algorithmName=" + algorithmName,
        async : false,
        dataType: 'json',
        success: function(res) {
            var hyperParametersResponse = res;
            if (hyperParametersResponse == '') {
                fromNext = false;
            }
            else {
                fromNext = true;
                if (algorithmName == 'LINEAR_REGRESSION') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                }
                else if (algorithmName == 'RIDGE_REGRESSION' || algorithmName == 'LASSO_REGRESSION') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[3].value);
                }
                else if (algorithmName == 'RANDOM_FOREST_REGRESSION') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[4].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[3].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[4] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[5] = sanitize(hyperParametersResponse[5].value);
                }
                else if (algorithmName == 'LOGISTIC_REGRESSION' || algorithmName == 'SVM') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[3].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[4] = sanitize(hyperParametersResponse[4].value);
                }
                else if (algorithmName == 'LOGISTIC_REGRESSION_LBFGS') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                }
                else if (algorithmName == 'DECISION_TREE') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[0].value);
                }
                else if (algorithmName == 'RANDOM_FOREST_CLASSIFICATION') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[4].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[3].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[4] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[5] = sanitize(hyperParametersResponse[5].value);
                }
                else if (algorithmName == 'NAIVE_BAYES') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                }
                else if (algorithmName == 'K_MEANS') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                }
                else if (algorithmName == 'K_MEANS_ANOMALY_DETECTION_WITH_UNLABELED_DATA') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                }
                else if (algorithmName == 'K_MEANS_ANOMALY_DETECTION_WITH_LABELED_DATA') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                }
		else if (algorithmName == 'STACKED_AUTOENCODERS') {
        	    hyperParametersArray[0] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[3].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[2].value);
                }
		else if (algorithmName == 'COLLABORATIVE_FILTERING') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[3].value);
                }
                else if (algorithmName == 'COLLABORATIVE_FILTERING_IMPLICIT') {
                    hyperParametersArray[0] = sanitize(hyperParametersResponse[0].value);
                    hyperParametersArray[1] = sanitize(hyperParametersResponse[1].value);
                    hyperParametersArray[2] = sanitize(hyperParametersResponse[2].value);
                    hyperParametersArray[3] = sanitize(hyperParametersResponse[3].value);
                    hyperParametersArray[4] = sanitize(hyperParametersResponse[4].value);
                    hyperParametersArray[5] = sanitize(hyperParametersResponse[5].value);
                }
            }
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    // put path in application navigator
    $('#nav-project').text(projectName);
    $('#nav-analysis').text(" \\ "+analysisName);

    $('#algo-cat').text(algorithmType.replace(/_/g, " "));
    $('#display-name').text(algorithmName.replace(/_/g, " "));

    var inputString = '';
    var hyperParameterInputValues = [];
    // set values for algorithm to build HTML inputs
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/configs/algorithms/" + algorithmName + "/hyperParams",
        async : false,
        dataType: 'json',
        success: function(res) {
            for (var index = 0; index < res.length; index++) {
                var param = res[index];
                // create display name from key value - replacing all '_' with ' '
                var displayName = param.key.replace(/_/g, " ");
                hyperParameterInputValues[index] = new Array(displayName, param.key, param.value, param.description);
            }
        },
        error: function(res) {
            var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    // build input HTML for hyper-parameters
	for (var i = 0; i < hyperParameterInputValues.length; i++) {
		if (fromNext) {
	    	inputString += buildInput(hyperParameterInputValues[i][0], hyperParameterInputValues[i][1], hyperParametersArray[i], hyperParameterInputValues[i][3]);
    	}
    	else {
	    	inputString += buildInput(hyperParameterInputValues[i][0], hyperParameterInputValues[i][1], hyperParameterInputValues[i][2], hyperParameterInputValues[i][3]);
    	}
	}

    // set built input HTML
    $("#parameter-inputs").append(inputString);

	if (algorithmName == 'STACKED_AUTOENCODERS') {
		loadInputFeaturesCountAndCreateDeepNetwork();
    } else {
		$("#dl-network").closest("div.wr-content").remove();
		//$("#col-md-12 col-centered wr-graph-content").children().remove();
    }

	// disable fields if the model is built from an existing analysis
	if(fromAnalysis == 'true') {
	    for (var i = 0; i < hyperParameterInputValues.length; i++) {
            $('#'+hyperParameterInputValues[i][1]).attr("disabled", "disabled");
        }
	}

	// load input features and draw network diagram after a delay
    $("#Layer_Sizes").on('change keyup paste', function() {
        $('#dl-network').html("Loading network diagram...");
        setTimeout(function(){
            loadInputFeaturesCountAndCreateDeepNetwork();
        }, 3000);

    });

    $('#prev-btn').on('click', function(e){
        e.preventDefault();
        var fromAnalysis = getParameterByName('fromAnalysis')
        window.location.href = '../algorithm/algorithm.jag?projectName=' + projectName + '&analysisName=' + analysisName + '&analysisId=' + analysisId + '&datasetId=' + datasetId + '&fromAnalysis=' + fromAnalysis;
    });

    $('#btn-next').on('click', function(e){
    	e.preventDefault();
    	var algorithmName = getParameterByName('algorithmName');
        var fromAnalysis = getParameterByName('fromAnalysis')

        if(algorithmName == 'COLLABORATIVE_FILTERING_IMPLICIT') {
            var weights = $('#Weights').val();
            if(validateWeights(weights) == false) {
                var errorText = 'Observation list length and weight length is not equal. Note that every observation should have a weight.';
                    handleNotification(errorText, '#notification-area', 'warning');
                return;
            }
        }

        var jsonData= '';
        var hyperParameters = [];

        $.ajax({
            type: "GET",
            url: serverUrl + "/api/configs/algorithms/" + algorithmName + "/hyperParams",
            async : false,
            dataType: 'json',
            success: function(res) {
                for (index = 0; index < res.length; index++) {
                    var param = res[index];
                    var key = param.key;
                    var val = $('#'+key).val();
                    jsonData = jsonData.concat("{ \"key\":\"",key,"\",\"value\":\"",val,"\"},");
                }
                jsonData = jsonData.substr(0,jsonData.length-1);
                jsonData = "[".concat(jsonData,"]");
            },
            error: function(res) {
                var errorText = res.responseText
                handleNotification(errorText, '#notification-area', 'warning');
            }
    	});

	    $.ajax({
            type: 'POST',
            url: serverUrl + "/api//analyses/" + analysisId + "/hyperParams?algorithmName=" + algorithmName,
            contentType: "application/json",
            data: jsonData,
            success: function(res){
                window.location.href = '../model/model.jag?analysisId=' + analysisId + '&projectName=' + projectName + '&analysisName=' + analysisName + '&datasetId=' + datasetId + '&algorithmName=' + algorithmName + '&algorithmName=' + algorithmName + '&algorithmType=' + algorithmType + '&fromAnalysis=' + fromAnalysis;
            },
            error: function(res){
                var errorText = res.responseText
                handleNotification(errorText, '#notification-area', 'warning');
            }
        });

    });

    // function that cancels an analysis
    $('#cancel-analysis').on('click', function(e){
        e.preventDefault();
        // if navigation is from analysis page do not delete the analysis
        if (fromAnalysis == 'true') {
            window.location.href = '../analysis/analysis.jag?analysisId=' + analysisId + '&datasetId=' + datasetId + '&projectName=' + projectName + '&analysisName=' + analysisName;
        }
        else {
            var noOfModels;
            // get number of models of this analysis
            $.ajax({
                type: 'GET',
                url: serverUrl + "/api/analyses/" + analysisId + "/models",
                async: false,
                success: function(res) {
                    noOfModels = res.length;
                },
                error: function(res){
                    var errorText = res.responseText
                    handleNotification(errorText, '#notification-area', 'warning');
                }
            });
            // delete analysis on CANCEL only if there are no models in this analysis
            if(noOfModels == 0) {
                $.ajax({
                    type: 'DELETE',
                    url: serverUrl + "/api/analyses/" + analysisId,
                    success: function(res){
                        window.location.href = '../project/projects.jag';
                    },
                    error: function(res){
                        var errorText = res.responseText
                        handleNotification(errorText, '#notification-area', 'warning');
                    }
                });
            }
            else {
                window.location.href = '../project/projects.jag';
            }
        }
    });

	$('#btn-build').on('click', function(e){

		$('.hyper-double').each(function(e){
            var value = $(this).val();
            if(!isValidDouble(value)){
            	showErrorMessage($(this).next('.form-val-error'),'* double is required');
            }

		});

		$('.hyper-integer').each(function(e) {
			var value = $(this).val();
			if(!isValidInteger(value)) {
			    showErrorMessage($(this).next('.form-val-error'),'* integer is required');
			}
		});

	});

	function loadInputFeaturesCountAndCreateDeepNetwork() {
		var featuresCount = -1;
		var responseVariable = "";
		var classCount = -1;
		var hidLayerArr = [];

		var hidLayerText = document.getElementById('Layer_Sizes').value;
		var hidLayerTokens = hidLayerText.split(",");
		for(var i=0; i<hidLayerTokens.length; i++){
			hidLayerArr[i] = parseInt(hidLayerTokens[i]);
    	}

    	$.ajax({
        	type: "GET",
        	url: serverUrl+"/api/analyses/"+analysisId+"/features",
        	async : false,
        	dataType: 'json',
        	success: function(res) {
	        	var featuresSet = res;
            	featuresCount = featuresSet.length;
        	},
        	error: function(res) {
            	var errorText = res.responseText;
            	handleNotification(errorText, '#notification-area', 'warning');
        	}
    	});

    	$.ajax({
        	type: "GET",
        	url: serverUrl+"/api/analyses/"+analysisId+"/responseVariables",
        	async : false,
        	dataType: 'text',
        	success: function(res) {
        		responseVariable = res;
        	},
        	error: function(res) {
            	var errorText = res.responseText;
            	handleNotification(errorText, '#notification-area', 'warning');
        	}
    	});

    	$.ajax({
        	type: "GET",
        	url: serverUrl+"/api/datasets/"+datasetId+"/stats?feature="+responseVariable,
        	async : false,
        	dataType: 'json',
        	success: function(res3) {
	            classCount = res3[0]["unique"];
    		    // featuresCount contains all varialbes we need to pass (featuresCount -1) as
                    // number of input variables
                    drawDLNetwork("#dl-network", featuresCount -1 , hidLayerArr, classCount);
        	},

        	error: function(res3) {
            	   var errorText = res3.responseText;
            	   handleNotification(errorText, '#notification-area', 'warning');
        	}
    	});

	}
});

function validateWeights(weights) {
    var observationList = '';
    var analysisId = getParameterByName('analysisId');
    // get previously set observation list
    $.ajax({
        type: "GET",
        url: serverUrl+"/api/analyses/"+analysisId+"/observationList",
        async : false,
        dataType: 'text',
        success: function(res) {
            observationList = sanitize(res);
        },
        error: function(res) {
            var errorText = res.responseText;
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    if(observationList != '') {
        return Boolean(observationList.trim().split(",").length == weights.trim().split(",").length);
    }

    return Boolean(false);
}

function buildInput(displayName, id, value, description) {

	inputString = 	'<label class="input-label">' + displayName + '<span class="help-tip glyphicon glyphicon-question-sign" data-toggle="tooltip" data-placement="right" title="' + description + '"></span></label>' +
					'<div class="input-control text">' +
					    '<input type="text" id="' + id + '" value="' + value + '" placeholder="input text"/>' +
					'</div>';
	return inputString;
}

function isValidDouble(number){
    return number.match(doubleRegEx) != null;
}

function isValidInteger(number) {
	return number.match(integerRegEx) != null;
}

function showErrorMessage(element, message){
    $(element).text(message);
}

function buildEvents(element){
	$(element).on('keypress', function(e) {
        showErrorMessage($(this).next('.form-val-error'), '');
	});
}

function buildHyperparametersUI(parameters){

	// update algorith's display name
	var algoDisplayName = parameters.displayName;
    $('#display-name').text(algoDisplayName);

    var allHyperparameters = '';
    var hyperParameters = parameters.hyperParameters;
    for(var i=0; i < hyperParameters.length; i++){
    	if (typeof(hyperParameters[i].type) == 'object') {
    		allHyperparameters += buildDropdown(hyperParameters[i]);
    	} else {
    		allHyperparameters += buildInputbox(hyperParameters[i]);
    	}
    }
    return allHyperparameters;
}

function buildInputbox(parameter){

    var type = parameter.type;

    var label = buildLabel(parameter.name);

    var controller = '<div class="input-control text">' +
                     '<input class="hyper-' + type + '"'+'type="text" value="" placeholder="input text"/>'+
				     '<span class="form-val-error" id="file-upload-error"></span>' +
				     '</div>';
	return label + controller;
}

function buildDropdown(parameter){
	var label = buildLabel(parameter.name);
	var controller = '<div class="input-control text"> <select>'
	for(var i=0; i<parameter.type.length; i++){
        var type = parameter.type[i];
        controller += '<option value="' + type.name + '">' + type.name + '</option>';
	}
	controller += '</select></div>';

	return label + controller;
}

function drawDLNetwork (cssClass, inCount, hiddenCounts, outCount) {
	d3.select(cssClass).attr("align","center");
	$(cssClass).empty();
	//allCounts keep the node counts of all layers
	var allCounts = [inCount];
	var allCounts = allCounts.concat(hiddenCounts);
	allCounts.push(outCount);

	// if the height of an element is more than this,
	// set height to this value
	var maxHeightThreshold = 750;
	var minHeightThreshold = 50;
	//to get min and max values of arrays
	Array.prototype.min = function() {
		  return Math.min.apply(null, this);
	};
	Array.prototype.max = function() {
		  return Math.max.apply(null, this);
	};

	var rectHeights = [];
	var rectColors = [];
	var minCount = allCounts.slice(1,allCounts.length-1).min();
	for(var i=0; i<allCounts.length; i++){
		rectHeights[i] = parseInt(allCounts[i]*100/minCount);
		if(rectHeights[i] > maxHeightThreshold){
			rectHeights[i] = maxHeightThreshold;
		}
		if(rectHeights[i] < minHeightThreshold){
			rectHeights[i] = minHeightThreshold;
		}
		if(i==0 || i == allCounts.length-1){
			rectColors[i] = "#e1b3ff";
		} else {
			rectColors[i] = "#eeeeee";
		}
	}

	var canvasWidth = 500;
	var spacingY = 20;

	//set the canvas size accordingly
	var canvasHeight;
	if(rectHeights.max()<maxHeightThreshold){
		canvasHeight = rectHeights.max() + (spacingY * 2);
	} else {
		canvasHeight = maxHeightThreshold;
	}

	//create the canvas
	var canvas = d3.select(cssClass)
					.append("svg")
					.attr("width", canvasWidth)
					.attr("height", canvasHeight);

	//creating shape elements (rectangles) to represent different layers
	var startX = 10;
	var widthRect = 50;
	var widthSpacing = 50;
	var currX = startX;
	for(var i=0; i<allCounts.length; i++){
		var posY = (canvasHeight - rectHeights[i])/2;
		var rect = canvas.append("rect")
				.attr("x", currX)
				.attr("y", posY)
				.attr("width", 50)
				.attr("height", rectHeights[i])
				.attr("fill", rectColors[i]);

		canvas.append("text")
		  .style("fill", "#666666")
		  .style("font-size", "25px")
		  .attr("dy", ".35em")
		  .attr("text-anchor", "middle")
		  .attr("transform", "translate(" + (currX + widthRect/2).toString()
				  + "," + (posY + rectHeights[i]/2).toString() +") rotate(90)")
		  .text(allCounts[i].toString());
		currX = currX + widthRect + widthSpacing;
	}

	//to move background elements to the background
	d3.selection.prototype.moveToBack = function() {
	    return this.each(function() {
	        var firstChild = this.parentNode.firstChild;
	        if (firstChild) {
	            this.parentNode.insertBefore(this, firstChild);
	        }
	    });
	};

	//drawing the arrow which goes from inputs to outputs
	var arrowHeadWidth = 20;
	var arrowHeadHeight = 20;

	var line = canvas.append("line")
    			.attr("x1", startX + widthRect)
    			.attr("y1", canvasHeight/2)
    			.attr("x2", currX - widthRect - widthSpacing - arrowHeadWidth)
    			.attr("y2", canvasHeight/2)
    			.attr("stroke-width", 6)
    			.attr("stroke", "#666666");

	var arrowStartX = currX - widthRect - widthSpacing;
	var arrowStartY = canvasHeight/2;
	var pathString = "M " + arrowStartX.toString() + " " + arrowStartY.toString() + " "
	+ "L " + (arrowStartX - arrowHeadWidth).toString() + " " + (arrowStartY - (arrowHeadHeight/2)).toString() + " "
	+ "L " + (arrowStartX - arrowHeadWidth).toString() + " " + (arrowStartY + (arrowHeadHeight/2)).toString() + " "
	+ "L " + arrowStartX.toString() + " " + arrowStartY.toString();

	var arrowHead = canvas.append("svg:path")
    .attr("d",pathString)
    .style("stroke-width", 1)
    .style("stroke", "#666666")
    .style("fill", "#666666");

	line.moveToBack();
	arrowHead.moveToBack();

	//add header text
	var textPosY = rectHeights.max() + spacingY + 50;
	var fontSize = "15px";
	data = ["Inputs", "Hidden Layers", "Outputs"];

	//added Input text as two text elements because
	//<br/> doesn't render in SVG
	var in1Text = canvas.append("text")
	  .attr("x", startX + widthRect/2)
	  .attr("y", textPosY)
	  .style("fill", "#666666")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[0]);

	var in2Text = canvas.append("text")
	  .attr("x", startX + widthRect/2)
	  .attr("y", textPosY + 20)
	  .style("fill", "#666666")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text("(Features)");

	//added Output text as two text elements because
	//<br/> doesn't render in SVG
	var out1Text = canvas.append("text")
	  .attr("x", currX - widthSpacing - widthRect/2)
	  .attr("y", textPosY)
	  .style("fill", "#666666")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[2]);

	var out2Text = canvas.append("text")
	  .attr("x", currX - widthSpacing - widthRect/2)
	  .attr("y", textPosY + 20)
	  .style("fill", "#666666")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text("(Classes)");

	//hidden layer text
	var hiddenTextPosX = (startX + widthRect/2 + (currX - widthSpacing - widthRect/2 - (startX + widthRect/2)))/2;
	var hiddenText = canvas.append("text")
	  .attr("x", hiddenTextPosX)
	  .attr("y", textPosY)
	  .style("fill", "#666666")
	  .style("font-size", fontSize)
	  .attr("text-anchor", "middle")
	  .text(data[1]);

}


/*function buildResponseSelector(workflowId, algoCategory) {
	var controller = '<div class="input-control text"> <select>';
    var label = buildLabel('Response Variable');
	$.ajax({
        url: './ajax/GetFeatures.jag',
        data: {wfid: workflowId, algocat: algoCategory},
        async: false,
        success: function(res){
        	var features = res.features;
        	for (var i=0; i<features.length; i++) {
        		controller += '<option value="' + features[i]+'">' + features[i] + '</option>';
        	}
        	controller += '</select></div>';
        },
        error: function(res){ //TODO: error handling...
        	console.log(res);
        }
	});

	return label + controller;
}*/

</script>

</body>
</html>
